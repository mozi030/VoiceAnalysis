package MFCCClassify;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MFCCClassify {

	static private String sourcePath = "/Users/moziliang/Documents/香港留学/2class/1Mutimedia(ROSSITER)/project/voice/all_voice_source_processed4";

	final static public ArrayList<String> outputs = new ArrayList<String>(
			Arrays.asList("down", "jump", "left", "move", "right", "shoot", "speedup", "up"));
	static public ArrayList<MFCCData> allData = new ArrayList<>();

	static int K = 1;

	static public void main(String[] args) throws Exception {
		getData();
		System.out.println("finish getData()");

		int right = 0;
		for (int i = 0; i < allData.size(); i++) {
			Map<Integer, Double> indexAndDiffernce = new HashMap<>();
			MFCCData mfccData1 = allData.get(i);
			for (int j = 0; j < allData.size(); j++) {
				if (i == j) {
					continue;
				}
				MFCCData mfccData2 = allData.get(j);
				double difference = mfccData1.getDifference(mfccData2);
				indexAndDiffernce.put(j, difference);
			}
			List<Map.Entry<Integer, Double>> entryList = new ArrayList<>(indexAndDiffernce.entrySet());
			Collections.sort(entryList, new Comparator<Map.Entry<Integer, Double>>() {
				@Override
				public int compare(Map.Entry<Integer, Double> entry1, Map.Entry<Integer, Double> entry2) {
					if (entry1.getValue() > entry2.getValue()) {
						return 1;
					} else if (entry1.getValue() < entry2.getValue()) {
						return -1;
					} else {
						return 0;
					}
				}
			});

			int[] outputScore = new int[outputs.size()];
			for (int j = 0; j < outputs.size(); j++) {
				outputScore[j] = 0;
			}
			for (int j = 0; j < K; j++) {
				int entryIndex = entryList.get(j).getKey();
				int label = allData.get(entryIndex).result;
				outputScore[label]++;
			}
			double MaxScore = outputScore[0];
			int MaxIndex = 0;
			for (int j = 1; j < outputScore.length; j++) {
				if (MaxScore < outputScore[j]) {
					MaxScore = outputScore[j];
					MaxIndex = j;
				}
			}
			if (MaxIndex == mfccData1.result) {
				System.out.println("good " + "MaxIndex: " + MaxIndex + "mfccData1.result: " + mfccData1.result);
				right++;
			} else {
				System.out.println("bad " + "MaxIndex: " + MaxIndex + "mfccData1.result: " + mfccData1.result);
			}
		}
		System.out.println("right: " + (1.0 * right / allData.size()));
	}

	static public void getData() throws Exception {
		File sourceFolder = new File(sourcePath);

		for (final File file1 : sourceFolder.listFiles()) {
			if (checkIsChar(file1.getName().charAt(0))) {
				for (final File file2 : file1.listFiles()) {
					if (checkIsChar(file2.getName().charAt(0))) {
						MFCCData mfccData = new MFCCData();

						int fileIndex = 0;
						while (true) {
							String filePath = sourcePath + "/" + file1.getName() + "/" + file2.getName() + "/"
									+ fileIndex + ".txt";
							File file = new File(filePath);
							if (!file.exists()) {
								break;
							}
							fileIndex++;
						}
						mfccData.data = new double[fileIndex][];
						for (int i = 0; i < fileIndex; i++) {
							String filePath = sourcePath + "/" + file1.getName() + "/" + file2.getName() + "/"
									+ i + ".txt";
							File file = new File(filePath);
							BufferedReader bufferedReader = new BufferedReader(new FileReader(file));
							String line = null;
							ArrayList<Double> currentData = new ArrayList<>();
							while ((line = bufferedReader.readLine()) != null) {
								currentData.add(Double.parseDouble(line));
							}
							bufferedReader.close();
							mfccData.data[i] = new double[currentData.size()];
							for (int j = 0; j < mfccData.data[i].length; j++) {
								mfccData.data[i][j] = currentData.get(j);
							}
						}
						mfccData.result = outputs.indexOf(file1.getName());
						allData.add(mfccData);
					}
				}
			}
		}
	}

	static public boolean checkIsChar(char a) {
		return (a >= 'a' && a <= 'z') || (a >= 'A' && a <= 'Z');
	}
}
