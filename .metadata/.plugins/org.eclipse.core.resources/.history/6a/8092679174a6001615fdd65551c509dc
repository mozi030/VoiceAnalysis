package VoiceFileTransform3;

import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Graphics2D;
import java.awt.image.BufferedImage;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.nio.file.Files;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.Comparator;
import java.util.HashMap;
import java.util.Map;

import javax.imageio.ImageIO;
import javax.security.auth.kerberos.KerberosKey;
import javax.sound.sampled.AudioFormat;
import javax.sound.sampled.AudioFormat.Encoding;
import javax.sound.sampled.AudioInputStream;
import javax.sound.sampled.AudioSystem;

import comirva.audio.util.MFCC;

public class VoicePreProcess {
	static private String sourcePath = "/Users/moziliang/Documents/香港留学/2class/1Mutimedia(ROSSITER)/project/voice/all_voice_source";

	static private String outputPath = "/Users/moziliang/Documents/香港留学/2class/1Mutimedia(ROSSITER)/project/voice/all_voice_source_processed3";

	static public void main(String[] args) throws Exception {
		File sourceFolder = new File(sourcePath);

		for (final File file1 : sourceFolder.listFiles()) {
			if (checkIsChar(file1.getName().charAt(0))) {
				for (final File file2 : file1.listFiles()) {
					if (checkIsChar(file2.getName().charAt(0))) {
						WeChatWavFormat wavFormat = WeChatWavFormat.readAndCheckFile(file2);
						wavFormat = ZeroFilter(wavFormat);

						double[][] data = myMFCC(wavFormat);

						printSamples(data, file1, file2);
					}
				}
			}
		}
	}

	static public double[][] myMFCC(WeChatWavFormat wavFormat) throws Exception {
		int window = 256;
		int factorNum = 13;
		int sampleLength = wavFormat.samples.length;
		if (sampleLength % (window / 2) != 0) {
			sampleLength = (sampleLength / (window / 2) + 1) * (window / 2);
		}

		double[] temp = new double[sampleLength];
		for (int i = 0; i < wavFormat.samples.length; i++) {
			temp[i] = (double) wavFormat.samples[i];
		}
		for (int i = wavFormat.samples.length; i < sampleLength; i++) {
			temp[i] = 0.0;
		}
		// MFCC mfcc = new MFCC(24000);
		// double [][]result = mfcc.process(temp);

		MFCC mfcc2 = new MFCC(24000, window, factorNum, true);
		double[][] result2 = mfcc2.process(temp);

		return result2;
	}

	static public WeChatWavFormat ZeroFilter(WeChatWavFormat wavFormat) throws Exception {
		int scale = 0;
		for (int i = 0; i < wavFormat.samples.length; i++) {
			if (Math.abs(wavFormat.samples[i]) > scale) {
				scale = Math.abs(wavFormat.samples[i]);
			}
		}
		double threshold = scale / 10.0;

		int[] temp = new int[wavFormat.samples.length];
		System.arraycopy(wavFormat.samples, 0, temp, 0, wavFormat.samples.length);
		int begin = 0;
		int end = wavFormat.samples.length - 1;
		while (Math.abs(temp[begin]) < threshold) {
			begin++;
		}
		while (Math.abs(temp[end]) < threshold) {
			end--;
		}
		if (begin > end) {
			throw new Exception("begin > end");
		}

		wavFormat.samples = new int[end - begin + 1];
		System.arraycopy(temp, begin, wavFormat.samples, 0, wavFormat.samples.length);
		return wavFormat;
	}

	static public void printSamples(double[][] data, File file1, File file2) throws Exception {
		String newFolderName = outputPath + "/" + file1.getName() + "/" + file2.getName();
		newFolderName = newFolderName.substring(0, newFolderName.length() - 4);
		File file3 = new File(newFolderName);
		if (!file3.exists() || !file3.isDirectory()) {
			file3.mkdir();
		}

		for (int i = 0; i < data.length; i++) {
			String fileName = newFolderName + "/" + i + ".txt";

			String outputString = "";
			for (int i = 0; i < wavFormat.samples.length; i++) {
				outputString += "" + wavFormat.samples[i] + "\n";
			}

			BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(new File(fileName)));
			bufferedWriter.write(outputString);
			bufferedWriter.close();
		}
	}

	static public boolean checkIsChar(char a) {
		return (a >= 'a' && a <= 'z') || (a >= 'A' && a <= 'Z');
	}
}
