package NeuralNetwork;

import java.awt.print.Printable;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileWriter;
import java.io.IOException;
import java.io.OutputStream;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.HashMap;
import java.util.Map;

import org.json.JSONArray;
import org.json.JSONObject;

public class NeuralNetwork {
	final static public String resultPath = "/Users/moziliang/Documents/香港留学/2class/1Mutimedia(ROSSITER)/project/voice/result";

	final static public int inputNum = 500;
	final static public ArrayList<String> outputs = new ArrayList<String>(
			Arrays.asList("down", "jump", "left", "move", "right", "shoot", "speedup", "up"));
	public static Node allNodes[][];

	final static public int hiddenLayerNum = 1;
	final static public int affectRange = 5;
	final static public double weightInitialValue = 0.001;
	final static public double learningRate = 0.2;

	public static long initialTime = 0;

	public NeuralNetwork() throws Exception {
		allNodes = new Node[hiddenLayerNum + 2][];
		allNodes[0] = new Node[inputNum];
		// first layer, the input layer
		for (int j = 0; j < inputNum; j++) {
			allNodes[0][j] = new Node();
			allNodes[0][j].lastNodeIndexAndWeight = null;
			int begin = j - affectRange / 2;
			if (begin < 0) {
				begin = 0;
			}
			int end = j + affectRange / 2;
			if (end >= inputNum) {
				end = inputNum - 1;
			}
			if (end < begin) {
				throw new Exception("end < begin");
			}
			allNodes[0][j].nextNodeIndexAndWeight = new HashMap<>();
			for (int k = begin; k <= end; k++) {
				allNodes[0][j].nextNodeIndexAndWeight.put(k, weightInitialValue);
			}
		}

		// middle layers, the hidden layers
		for (int i = 1; i <= hiddenLayerNum; i++) {
			allNodes[i] = new Node[inputNum];
			for (int j = 0; j < inputNum; j++) {
				allNodes[i][j] = new Node();
				int begin = j - affectRange / 2;
				if (begin < 0) {
					begin = 0;
				}
				int end = j + affectRange / 2;
				if (end >= inputNum) {
					end = inputNum - 1;
				}
				if (end < begin) {
					throw new Exception("end < begin");
				}
				allNodes[i][j].lastNodeIndexAndWeight = new HashMap<>();
				for (int k = begin; k <= end; k++) {
					allNodes[i][j].lastNodeIndexAndWeight.put(k, weightInitialValue);
				}
				allNodes[i][j].nextNodeIndexAndWeight = new HashMap<>();
				if (i != hiddenLayerNum) {
					for (int k = begin; k <= end; k++) {
						allNodes[i][j].nextNodeIndexAndWeight.put(k, weightInitialValue);
					}
				} else {
					for (int k = 0; k < outputs.size(); k++) {
						allNodes[i][j].nextNodeIndexAndWeight.put(k, weightInitialValue);
					}
				}
				allNodes[i][j].cita = weightInitialValue;
			}
		}
		// last layer, the output layer
		allNodes[hiddenLayerNum + 1] = new Node[outputs.size()];
		for (int j = 0; j < outputs.size(); j++) {
			allNodes[hiddenLayerNum + 1][j] = new Node();
			allNodes[hiddenLayerNum + 1][j].nextNodeIndexAndWeight = null;
			allNodes[hiddenLayerNum + 1][j].lastNodeIndexAndWeight = new HashMap<>();
			for (int k = 0; k < inputNum; k++) {
				allNodes[hiddenLayerNum + 1][j].lastNodeIndexAndWeight.put(k, weightInitialValue);
			}
			allNodes[hiddenLayerNum + 1][j].cita = weightInitialValue;
		}
	}

	public void TrainNetwork(ArrayList<Data> allTrainData) throws Exception {
		initialTime = System.currentTimeMillis();

		int index = 0;
		int count = 0;
		while (true) {
			Data currentData = allTrainData.get(index);
			for (int i = 0; i < inputNum; i++) {
				allNodes[0][i].data = 1.0 * currentData.dataList[i] / 32768;
			}
			int evaluatedIndex = ForwardFeed();

			double e = 0;
			for (int i = 0; i < outputs.size(); i++) {
				if (i == currentData.result) {
					e += Math.abs(1 - allNodes[hiddenLayerNum + 1][i].data);
				} else {
					e += Math.abs(allNodes[hiddenLayerNum + 1][i].data);
				}
			}
			e /= 8.0
			
			System.out.println("evaluatedIndex: " + evaluatedIndex + "  trueResult: " + currentData.result
					+ " evaluated: " + allNodes[hiddenLayerNum + 1][evaluatedIndex].data + "  result: "
					+ (evaluatedIndex == currentData.result) + " error: " + e);

			if (evaluatedIndex == currentData.result) {
				count++;
				if (count >= 100) {
					printWeight();
					System.out.println("using time: " + (System.currentTimeMillis() - initialTime) / 1000 + "second");
					break;
				}
			} else {
				count = 0;
			}

			BackPropagation(currentData.result);

			index = (index + 1) % allTrainData.size();
		}
	}

	public void BackPropagation(int realIndex) throws Exception {
		for (int i = 0; i < outputs.size(); i++) {
			double evaluatedValue = allNodes[hiddenLayerNum + 1][i].data;
			double realValue = 0;
			if (realIndex == i) {
				realValue = 1;
			}
			allNodes[hiddenLayerNum + 1][i].error = evaluatedValue * (1 - evaluatedValue)
					* (realValue - evaluatedValue);
			for (Map.Entry<Integer, Double> entry : allNodes[hiddenLayerNum + 1][i].lastNodeIndexAndWeight.entrySet()) {
				int lastIndex = entry.getKey();
				double lastWeight = entry.getValue();
				double newWeight = lastWeight + learningRate * allNodes[hiddenLayerNum + 1][i].error
						* allNodes[hiddenLayerNum][lastIndex].data;
				allNodes[hiddenLayerNum + 1][i].lastNodeIndexAndWeight.put(lastIndex, newWeight);
				allNodes[hiddenLayerNum][lastIndex].nextNodeIndexAndWeight.put(i, newWeight);
			}
			allNodes[hiddenLayerNum + 1][i].cita += learningRate * allNodes[hiddenLayerNum + 1][i].error;
		}

		for (int i = hiddenLayerNum; i >= 1; i--) {
			for (int j = 0; j < inputNum; j++) {
				double o = allNodes[i][j].data;
				double temp = 0;
				for (Map.Entry<Integer, Double> entry : allNodes[i][j].nextNodeIndexAndWeight.entrySet()) {
					int nextIndex = entry.getKey();
					double nextWeight = entry.getValue();
					temp += nextWeight * allNodes[i + 1][nextIndex].data;
				}
				allNodes[i][j].error = o * (1 - o) * temp;

				for (Map.Entry<Integer, Double> entry : allNodes[i][j].lastNodeIndexAndWeight.entrySet()) {
					int lastIndex = entry.getKey();
					double lastWeight = entry.getValue();
					double newWeight = lastWeight
							+ learningRate * allNodes[i][j].error * allNodes[i - 1][lastIndex].data;
					allNodes[i][j].lastNodeIndexAndWeight.put(lastIndex, newWeight);
					allNodes[i - 1][lastIndex].nextNodeIndexAndWeight.put(j, newWeight);
				}
				allNodes[i][j].cita += learningRate * allNodes[i][j].error;
			}
		}
	}

	public int ForwardFeed() throws Exception {
		for (int i = 1; i <= hiddenLayerNum; i++) {
			for (int j = 0; j < inputNum; j++) {
				double temp = 0;
				for (Map.Entry<Integer, Double> entry : allNodes[i][j].lastNodeIndexAndWeight.entrySet()) {
					int lastIndex = entry.getKey();
					double lastWeight = entry.getValue();
					temp += lastWeight * allNodes[i - 1][lastIndex].data;
				}
				temp += allNodes[i][j].cita;
				allNodes[i][j].data = evaluate(temp);
			}
		}
		double temp = 0;
		int maxIndex = -1;
		double maxEvaluation = -1;
		for (int j = 0; j < outputs.size(); j++) {
			for (Map.Entry<Integer, Double> entry : allNodes[hiddenLayerNum + 1][j].lastNodeIndexAndWeight.entrySet()) {
				int lastIndex = entry.getKey();
				double lastWeight = entry.getValue();
				temp += lastWeight * allNodes[hiddenLayerNum][lastIndex].data;
			}
			temp += allNodes[hiddenLayerNum + 1][j].cita;
			allNodes[hiddenLayerNum + 1][j].data = evaluate(temp);
			double a = allNodes[hiddenLayerNum + 1][j].data;
			if (maxEvaluation < allNodes[hiddenLayerNum + 1][j].data) {
				maxEvaluation = allNodes[hiddenLayerNum + 1][j].data;
				maxIndex = j;
			}
		}
		if (maxIndex == -1) {
			throw new Exception("maxIndex == -1");
		}
		return maxIndex;
	}

	public static double evaluate(double a) {
		double result = (double) (1.0 / (1 + Math.exp(-a)));
		// if (Math.abs(result - 1.0) < 1e-6) {
//		System.out.println("a = " + a + ";  result = " + result);
		// }
		return result;
	}

	public static void printWeight() throws Exception {
		JSONObject mainObject = new JSONObject();
		for (int i = 0; i < hiddenLayerNum + 2; i++) {
			JSONObject hiddenLayerObject = new JSONObject();
			for (int j = 0; j < allNodes[i].length; j++) {
				JSONObject nodeObject = new JSONObject();

				if (allNodes[i][j].nextNodeIndexAndWeight != null) {
					JSONObject nextWeightObject = new JSONObject();
					for (Map.Entry<Integer, Double> entry : allNodes[i][j].nextNodeIndexAndWeight.entrySet()) {
						int nextIndex = entry.getKey();
						double nextWeight = entry.getValue();
						nextWeightObject.put("" + nextIndex, nextWeight);
					}
					nodeObject.put("nextWeightObject", nextWeightObject);
				}

				if (allNodes[i][j].lastNodeIndexAndWeight != null) {
					JSONObject lastWeightObject = new JSONObject();
					for (Map.Entry<Integer, Double> entry : allNodes[i][j].lastNodeIndexAndWeight.entrySet()) {
						int lastIndex = entry.getKey();
						double lastWeight = entry.getValue();
						lastWeightObject.put("" + lastIndex, lastWeight);
					}
					nodeObject.put("lastWeightObject", lastWeightObject);
				}

				nodeObject.put("data", allNodes[i][j].data);
				nodeObject.put("cita", allNodes[i][j].cita);
				nodeObject.put("error", allNodes[i][j].error);

				hiddenLayerObject.put("" + j, nodeObject);
			}
			mainObject.put("" + i, hiddenLayerObject);
		}

		int fileIndex = 0;
		File file = null;
		do {
			fileIndex++;
			file = new File(resultPath + "/" + fileIndex + ".json");
		} while (file.exists());
		BufferedWriter bufferedWriter = new BufferedWriter(new FileWriter(file));
		bufferedWriter.write(mainObject.toString());
		bufferedWriter.close();
	}
}
