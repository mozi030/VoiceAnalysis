package NeuralNetwork;

import java.util.ArrayList;
import java.util.Arrays;

public class NeuralNetwork {
	final static public int inputNum = 500;
	final static public ArrayList<String> outputs = new ArrayList<String> (Arrays.asList("down", "jump", "left", "move", "right", "shoot", "speedup", "up"));
	public int outputNum;
	final static public int hiddenLayerNum = 2;
	public float weight[][][];
	public float cita[][];
	final static public int affectRange = 5;
	final static public float weightInitialValue = 0.01f;
	final static public float learningRate = 0.1f;

	public NeuralNetwork() throws Exception{
		outputNum = outputs.size();
		weight = new float[hiddenLayerNum + 1][][];
		for (int i = 0; i < hiddenLayerNum; i++) {
			weight[i] = new float[inputNum][0];

			for (int j = 0; j < inputNum; j++) {
				int begin = j - affectRange / 2;
				if (begin < 0) {
					begin = 0;
				}
				int end = j + affectRange / 2;
				if (end >= inputNum) {
					end = inputNum - 1;
				}
				if (end < begin) {
					throw new Exception("end < begin");
				}
				weight[i][j] = new float[end - begin + 1];
				for (int k = 0; k <= end - begin; k++) {
					weight[i][j][k] = weightInitialValue;
				}
			}
		}
		
		weight[hiddenLayerNum] = new float[1][inputNum];
		Arrays.fill(weight[hiddenLayerNum][0], weightInitialValue);
		
		cita = new float[hiddenLayerNum + 1][];
		for (int i = 0; i < hiddenLayerNum; i++) {
			cita[i] = new float[inputNum];
			Arrays.fill(cita[i], weightInitialValue);
		}
		cita[hiddenLayerNum] = new float[1];
		cita[hiddenLayerNum][0] = weightInitialValue;
	}
	
	public void TrainNetwork(ArrayList<Data> allTrainData) {
		int index = 0;
		ForwardFeed(allTrainData.get(index));
	}
	
	public void ForwardFeed(Data data) {
		float tempResult[][] = new float[hiddenLayerNum][inputNum];
		
		for (int i = 0; i < hiddenLayerNum; i++) {
			for (int j = 0; j < inputNum; j++) {
				float temp = 0;
				int begin = j - affectRange / 2;
				if (begin < 0) {
					begin = 0;
				}
				for (int k = 0; k < weight[i][j].length; k++) {
					temp += weight[i][j][k] * data.dataList[begin + k];
				}
				temp += cita[i][j];
				
				tempResult[i][j] = evoluate(temp);
			}
		}
	}
	
	public float evoluate(float a) {
		return (float) (1.0 / (1 + Math.exp(-a)));
	}
}
