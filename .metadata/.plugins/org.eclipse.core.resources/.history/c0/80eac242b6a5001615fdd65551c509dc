package VoiceFileTransform2;

public class FFT {
	static public int[] fft(int[]samples) {
		Complex[] values = new Complex[512];
		int index = 0;
		while ((line = bufferedReader.readLine()) != null) {
			int value = Integer.parseInt(line);
			Complex complex = new Complex(value);
			values[index++] = complex;
		}
		bufferedReader.close();
		while (index != 512) {
			values[index++] = new Complex(0);
		}
		System.out.println("length: " + index);
		Complex[] result = fft(values);
		System.out.println("length: " + result.length);
		int sample[] = new int[result.length];
		int maximum = 0;

		for (int i = 0; i < result.length; i++) {
			sample[i] = (int) result[i].re();
			if (Math.abs(sample[i]) > maximum) {
				maximum = Math.abs(sample[i]);
			}
		}
	}
	

	static public Complex[] fft(Complex[] x) {
		int N = x.length;

		// base case
		if (N == 1)
			return new Complex[] { x[0] };

		// radix 2 Cooley-Tukey FFT
		if (N % 2 != 0) {
			throw new RuntimeException("N is not a power of 2");
		}

		// fft of even terms
		Complex[] even = new Complex[N / 2];
		for (int k = 0; k < N / 2; k++) {
			even[k] = x[2 * k];
		}
		Complex[] q = fft(even);

		// fft of odd terms
		Complex[] odd = even; // reuse the array
		for (int k = 0; k < N / 2; k++) {
			odd[k] = x[2 * k + 1];
		}
		Complex[] r = fft(odd);

		// combine
		Complex[] y = new Complex[N];
		for (int k = 0; k < N / 2; k++) {
			double kth = -2 * k * Math.PI / N;
			Complex wk = new Complex(Math.cos(kth), Math.sin(kth));
			y[k] = q[k].add(wk.mult(r[k]));
			y[k + N / 2] = q[k].minus(wk.mult(r[k]));
		}
		return y;
	}

}
